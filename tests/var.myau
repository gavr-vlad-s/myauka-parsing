%scaner_name myfirstscaner  

%codes_type codes  

%ident_name Id

%idents "" : ""
 {[:Letter:]|[:letter:]|_([:Letter:]|[:letter:]|_|[:digits:])*}

%class_members
" __int128 int_value;
__int128 fract_part;
size_t exponent;
int num_of_digits;
int sign_of_degree;
bool is_float;                              
__float128 build_float();"

%token_fields
"unsigned __int128 int_val; __float128 float_val;"

%codes 
Int,                     Float,                 False,
Char,                    String,                Void,
If,                      Const,                 ElseIf, 
Else,                    EndIf,                 For,
While,                   Repeat,                Until,
Exit,                    Continue,              Return,                   
Read,                    Print,                 Kw_Int, 
Kw_float,                Kw_bool,               Kw_char, 
Kw_string,               Kw_void,               Var, 
Kw_array,                Proto,                 Func,
Equal,                   Plus,                  Minus,
Multiplication,          Division,              Module, 
LessThan,                MoreThan,              LessOrEqual, 
MoreOrEqual,             Unequal,               FractDiv,
LogicalOr,               LogicarNor,            LogicalNot,          
LogicalAnd,              LogicalNAnd,           LXor,
LNXor,                   BitXor,                BitOr,
BNXor,                   BNor,                  BitAnd, 
BinaryAnd,               BitLeftShift,          BirRightShift,
FractPow,                Openif_block,          endif_block, 
Open_round,              Close_round,           Dim_size, 
Cond_op,                 Semicolon,             Comma,
after_label,             Open_square,           Close_square,
Colon,                   ColonAssign,           PlusColonAssign, 
MinusColonAssign,        MultColonAssign,       SlashColonAssign, 
SlashDotColonAssign,     TwoMultColonAssign,    TwoMultDotColonAssign, 
PercColonAssign,         AmpColonAssign,        TilAmpColonAssign, 
LShiftColAssign,         RShiftColAssign,       PipColAssign, 
TilPipColAssign,         CirColAssign,          TilCirColAssign, 
TwoPipColAssign,         NTwoPipColAssign,      TwoCirColAssign, 
NTwoCirColAssign,        TwoColAssign,          NTwoColAssign,
True  

%impl_additions "
#include <quadmath> 
size_t digit2int(char32_t ch)
{
size_t v =  ch - U'0';
return (v<=9)? v:(v&0b1101'1111) - 7;
};
__float128 myfirstscaner::build_float()
{
__float128 num;                                                                               
num = int_value + fract_part*powq(10, num_of_digits);
num = num*powq(10, sign_of_degree*exponent);
return num;}"

%keywords
"var" : Var, 
"int" : Kw_int, 
"float" : Kw_float, 
"bool" : Kw_bool, 
"char" : Kw_char, 
"string" : Kw_string,
"void" : Kw_void, 
"array" : Kw_array,
"true" : True,
"false" : False, 
"proto" : Proto, 
"func" : Func,
"const" : Const,  
"if" : If,  
"elif" : ElseIf,
"else" : Else, 
"endif" : EndIf, 
"for" : For,
"while" : While, 
"repeat" : Repeat, 
"until" : Until,
"exit" : Exit, 
"continue" : Continue,  
"return" : Return,
"read" : Read, 
"print" : Print

%delimiters
"=" : Equal, 
"+" : Plus, 
"-" : Minus, 
"*" : Multiplication, 
"/" : Division, 
"%" : Module,  
"<" : LessThan, 
">" : MoreThan, 
"<=" : LessOrEqual, 
">=" : MoreOrEqual, 
"!=" : Unequal, 
"/." : FractDiv,
"||" : LogicalOr, 
"!||" : LogicalNor, 
"!" : LogicalNot, 
"&&" : LogicalAnd, 
"!&&" : LogicalNAnd, 
"^^" : LXor,
"!^^" : LNXor, 
"^" : BitXor, 
"|" : BitOr,
"~^" : BNXor, 
"~|" : BNor, 
"&" : BitAnd, 
"~&" : BinaryAnd, 
"<<" : BitLeftShift, 
">>" : BirRightShift,
"**." : FractPow, 
"{" : Openif_block, 
"}" : endif_block, 
"(" : Open_round, 
")" : Close_round,
"#" : Dim_size, 
"?" : cond_op, 
";" : Semicolon, 
"," : Comma, 
"::" : after_label,
"[" : Open_square,
"]" : Close_square,
":" : Colon, 
":=" : ColonAssign, 
"+:=" : PlusColonAssign, 
"-:=" : MinusColonAssign, 
"*:=" : MultColonAssign, 
"/:=" : SlashColonAssign, 
"/.:=" : SlashDotColonAssign, 
"**:=" : TwoMultColonAssign, 
"**.:=" : TwoMultDotColonAssign, 
"%:=" : PercColonAssign, 
"&:=" : AmpColonAssign, 
"~&:=" : TilAmpColonAssign, 
"<<:=" : LShiftColAssign, 
">>:=" : RShiftColAssign, 
"|:=" : PipColAssign, 
"~|:=" : TilPipColAssign, 
"^:=" : CirColAssign,
"~^:=" : TilCirColAssign, 
"||:=" : TwoPipColAssign, 
"!||:=" : NTwoPipColAssign,  
"^^:=" : TwoCirColAssign, 
"!^^:=" : NTwoCirColAssign, 
"&&:=" : TwoColAssign,
"!&&:=" : NTwoColAssign

%numbers "int_value = 0; fract_part = 0; exponent = 0; num_of_digits = 0; is_float = false" : "if(is_float)
{
token.code = Float;
token.float_val = build_value();
}
else
{
token.code = Int;
token.int_val = int_value;
}"

%action SetFlag "is_float = true;"

%action AddDecNumb "int_value = int_value*10 + digit2int(ch);"

%action AddBinNumb "int_value = (int_value << 1) + digit2int(ch);"

%action AddOctNumb "int_value = (int_value << 3) + digit2int(ch);"

%action AddHexNumb "int_value = (int_value << 4) + digit2int(ch);"

%action AddToDegre "exponent = exponent*10 + digit2int(ch);" 

%action AddDecToFract "fract_part = fract_part*10 + digit2int(ch); ++num_of_digits;"

%action WhatSign "sign_of_degree = (ch == U'+')?1:(-1);"

{[:digits:]$AddDecNumb('?[:digits:]$AddDecNumb)*(.$SetFlag[:digits:]$AddDecToFract('?[:digits:]$AddDecToFract)*)
?((E|e)$SetFlag+|-$WhatSign?[:digits:]$AddToDegre('?[:digits:]$AddToDegre)*)?
|0o[:odigits:]$AddOctNumb('?[:odigits:]$AddOctNumb)*|
0(b|B)[:bdigits:]$AddBinNumb('?[:bdigits:]$AddBinNumb)*|
0(x|X)[:xdigits:]$AddHexNumb('?[:xdigits:]$AddHexNumb)*}
